C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe \\calebasse\2160
                    -9785\Bureau\TP Micro S2\MCU8bits_RepEtudiants\HO_TASEVSKI\TP6\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) 
                    -WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(//calebasse/21609785
                    -/Bureau/TP Micro S2/MCU8bits_RepEtudiants/HO_TASEVSKI/TP6/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v
                    -3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930;C:/SiliconLabs
                    -/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAG
                    -ELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_C8051F930_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          //==============================================================================
  17          // enter_DefaultMode_from_RESET
  18          //==============================================================================
  19          extern void enter_DefaultMode_from_RESET(void) {
  20   1              // $[Config Calls]
  21   1              PCA_0_enter_DefaultMode_from_RESET();
  22   1              CLOCK_0_enter_DefaultMode_from_RESET();
  23   1              PORTS_0_enter_DefaultMode_from_RESET();
  24   1              PORTS_1_enter_DefaultMode_from_RESET();
  25   1              PBCFG_0_enter_DefaultMode_from_RESET();
  26   1              TIMER01_0_enter_DefaultMode_from_RESET();
  27   1              TIMER16_3_enter_DefaultMode_from_RESET();
  28   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  29   1              UART_0_enter_DefaultMode_from_RESET();
  30   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  31   1              // [Config Calls]$
  32   1      
  33   1      }
  34          
  35          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  36   1      
  37   1              // $[Watchdog Disable]
  38   1              // Stop Watchdog
  39   1              // If MCU is reset by WDT before it runs to main(), please disable it in SILABS_STARTUP.A51
  40   1              SFRPAGE = 0x00;
  41   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  42   1      
  43   1              // [Watchdog Disable]$
  44   1      
  45   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]
  46   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]$
  47   1      
  48   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
  49   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
  50   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 2   

  51   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
  52   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
  53   1      
  54   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
  55   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
  56   1      
  57   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
  58   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
  59   1      
  60   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
  61   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
  62   1      
  63   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  64   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
  65   1      
  66   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
  67   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
  68   1      
  69   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
  70   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
  71   1      
  72   1              // $[PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]
  73   1              // [PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]$
  74   1      
  75   1              // $[PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]
  76   1              // [PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]$
  77   1      
  78   1              // $[PCA0CPH3 - PCA Channel 3 Capture Module High Byte]
  79   1              // [PCA0CPH3 - PCA Channel 3 Capture Module High Byte]$
  80   1      
  81   1              // $[PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]
  82   1              // [PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]$
  83   1      
  84   1              // $[PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]
  85   1              // [PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]$
  86   1      
  87   1              // $[PCA0CPH4 - PCA Channel 4 Capture Module High Byte]
  88   1              // [PCA0CPH4 - PCA Channel 4 Capture Module High Byte]$
  89   1      
  90   1              // $[PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]
  91   1              /*
  92   1               // ECCF (Channel 5 Capture/Compare Flag Interrupt Enable) = DISABLED
  93   1               //     (Disable CCF5 interrupts.)
  94   1               // MAT (Channel 5 Match Function Enable) = ENABLED (Enable match
  95   1               //     function.)
  96   1               // CAPN (Channel 5 Capture Negative Function Enable) = DISABLED (Disable
  97   1               //     negative edge capture.)
  98   1               // PWM16 (Channel 5 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
  99   1               //     11-bit PWM selected.)
 100   1               // CAPP (Channel 5 Capture Positive Function Enable) = DISABLED (Disable
 101   1               //     positive edge capture.)
 102   1               // ECOM (Channel 5 Comparator Function Enable) = ENABLED (Enable
 103   1               //     comparator function.)
 104   1               // PWM (Channel 5 Pulse Width Modulation Mode Enable) = DISABLED (Disable
 105   1               //     PWM function.)
 106   1               // TOG (Channel 5 Toggle Function Enable) = DISABLED (Disable toggle
 107   1               //     function.)
 108   1               */
 109   1              PCA0CPM5 = PCA0CPM5_ECCF__DISABLED | PCA0CPM5_MAT__ENABLED
 110   1                              | PCA0CPM5_CAPN__DISABLED | PCA0CPM5_PWM16__8_BIT
 111   1                              | PCA0CPM5_CAPP__DISABLED | PCA0CPM5_ECOM__ENABLED
 112   1                              | PCA0CPM5_PWM__DISABLED | PCA0CPM5_TOG__DISABLED;
 113   1              // [PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 3   

 114   1      
 115   1              // $[PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]
 116   1              /*
 117   1               // PCA0CPL5 (PCA Channel 5 Capture Module Low Byte) = 0x22
 118   1               */
 119   1              PCA0CPL5 = (0x22 << PCA0CPL5_PCA0CPL5__SHIFT);
 120   1              // [PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]$
 121   1      
 122   1              // $[PCA0CPH5 - PCA Channel 5 Capture Module High Byte]
 123   1              // [PCA0CPH5 - PCA Channel 5 Capture Module High Byte]$
 124   1      
 125   1              // $[PCA0CN - PCA Control]
 126   1              /*
 127   1               // CR (PCA Counter/Timer Run Control) = RUN (Start the PCA Counter/Timer
 128   1               //     running.)
 129   1               */
 130   1              PCA0CN = PCA0CN_CR__RUN;
 131   1              // [PCA0CN - PCA Control]$
 132   1      
 133   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 134   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 135   1      
 136   1              // $[PCA0H - PCA Counter/Timer High Byte]
 137   1              // [PCA0H - PCA Counter/Timer High Byte]$
 138   1      
 139   1              // $[PCA0PWM - PCA PWM Configuration]
 140   1              // [PCA0PWM - PCA PWM Configuration]$
 141   1      
 142   1              // $[PCA0MD - PCA Mode]
 143   1              // [PCA0MD - PCA Mode]$
 144   1      
 145   1              // $[WDT - Watchdog run Control]
 146   1              // [WDT - Watchdog run Control]$
 147   1      
 148   1      }
 149          
 150          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 151   1      
 152   1              // $[CLKSEL - Clock Select]
 153   1              /*
 154   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_2 (SYSCLK is equal to
 155   1               //     selected clock source divided by 2.)
 156   1               // CLKSL (Clock Source Select) = LPOSC (Clock derived from the Internal
 157   1               //     Low Power Oscillator.)
 158   1               */
 159   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_2 | CLKSEL_CLKSL__LPOSC;
 160   1              // Wait for the clock to be ready
 161   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 162   1                      ;
 163   1              // [CLKSEL - Clock Select]$
 164   1      
 165   1      }
 166          
 167          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 168   1      
 169   1              // $[P0 - Port 0 Pin Latch]
 170   1              // [P0 - Port 0 Pin Latch]$
 171   1      
 172   1              // $[P0MDOUT - Port 0 Output Mode]
 173   1              /*
 174   1               // B0 (Port 0 Bit 0 Output Mode) = OPEN_DRAIN (P0.0 output is open-
 175   1               //     drain.)
 176   1               // B1 (Port 0 Bit 1 Output Mode) = OPEN_DRAIN (P0.1 output is open-
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 4   

 177   1               //     drain.)
 178   1               // B2 (Port 0 Bit 2 Output Mode) = OPEN_DRAIN (P0.2 output is open-
 179   1               //     drain.)
 180   1               // B3 (Port 0 Bit 3 Output Mode) = OPEN_DRAIN (P0.3 output is open-
 181   1               //     drain.)
 182   1               // B4 (Port 0 Bit 4 Output Mode) = PUSH_PULL (P0.4 output is push-pull.)
 183   1               // B5 (Port 0 Bit 5 Output Mode) = OPEN_DRAIN (P0.5 output is open-
 184   1               //     drain.)
 185   1               // B6 (Port 0 Bit 6 Output Mode) = OPEN_DRAIN (P0.6 output is open-
 186   1               //     drain.)
 187   1               // B7 (Port 0 Bit 7 Output Mode) = OPEN_DRAIN (P0.7 output is open-
 188   1               //     drain.)
 189   1               */
 190   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 191   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 192   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
 193   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
 194   1              // [P0MDOUT - Port 0 Output Mode]$
 195   1      
 196   1              // $[P0MDIN - Port 0 Input Mode]
 197   1              // [P0MDIN - Port 0 Input Mode]$
 198   1      
 199   1              // $[P0SKIP - Port 0 Skip]
 200   1              // [P0SKIP - Port 0 Skip]$
 201   1      
 202   1              // $[P0MASK - Port 0 Mask]
 203   1              // [P0MASK - Port 0 Mask]$
 204   1      
 205   1              // $[P0MAT - Port 0 Match]
 206   1              // [P0MAT - Port 0 Match]$
 207   1      
 208   1              // $[P0DRV - Port 0 Drive Strength]
 209   1              // [P0DRV - Port 0 Drive Strength]$
 210   1      
 211   1      }
 212          
 213          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 214   1      
 215   1              // $[P1 - Port 1 Pin Latch]
 216   1              // [P1 - Port 1 Pin Latch]$
 217   1      
 218   1              // $[P1MDOUT - Port 1 Output Mode]
 219   1              /*
 220   1               // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 221   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 222   1               //     drain.)
 223   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 224   1               //     drain.)
 225   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 226   1               //     drain.)
 227   1               // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 228   1               //     drain.)
 229   1               // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 230   1               //     drain.)
 231   1               // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 232   1               //     drain.)
 233   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 234   1               //     drain.)
 235   1               */
 236   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 237   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 238   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 239   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 5   

 240   1              // [P1MDOUT - Port 1 Output Mode]$
 241   1      
 242   1              // $[P1MDIN - Port 1 Input Mode]
 243   1              // [P1MDIN - Port 1 Input Mode]$
 244   1      
 245   1              // $[P1SKIP - Port 1 Skip]
 246   1              // [P1SKIP - Port 1 Skip]$
 247   1      
 248   1              // $[P1MASK - Port 1 Mask]
 249   1              // [P1MASK - Port 1 Mask]$
 250   1      
 251   1              // $[P1MAT - Port 1 Match]
 252   1              // [P1MAT - Port 1 Match]$
 253   1      
 254   1              // $[P1DRV - Port 1 Drive Strength]
 255   1              // [P1DRV - Port 1 Drive Strength]$
 256   1      
 257   1      }
 258          
 259          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 260   1      
 261   1              // $[XBR2 - Port I/O Crossbar 2]
 262   1              /*
 263   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 264   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 265   1               //     mode).)
 266   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 267   1               */
 268   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 269   1              // [XBR2 - Port I/O Crossbar 2]$
 270   1      
 271   1              // $[XBR0 - Port I/O Crossbar 0]
 272   1              /*
 273   1               // URT0E (UART I/O Output Enable) = ENABLED (UART TX, RX routed to Port
 274   1               //     pins P0.4 and P0.5.)
 275   1               // SPI0E (SPI I/O Enable) = DISABLED (SPI I/O unavailable at Port pins.)
 276   1               // SMB0E (SMBus0 I/O Enable) = DISABLED (SMBus0 I/O unavailable at Port
 277   1               //     pins.)
 278   1               // CP0E (Comparator0 Output Enable) = DISABLED (CP0 unavailable at Port
 279   1               //     pin.)
 280   1               // CP0AE (Comparator0 Asynchronous Output Enable) = DISABLED
 281   1               //     (Asynchronous CP0 unavailable at Port pin.)
 282   1               // CP1E (Comparator1 Output Enable) = DISABLED (CP1 unavailable at Port
 283   1               //     pin.)
 284   1               // CP1AE (Comparator1 Asynchronous Output Enable) = DISABLED
 285   1               //     (Asynchronous CP1 unavailable at Port pin.)
 286   1               // SYSCKE (SYSCLK Output Enable) = DISABLED (SYSCLK unavailable at Port
 287   1               //     pin.)
 288   1               */
 289   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__DISABLED
 290   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 291   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 292   1              // [XBR0 - Port I/O Crossbar 0]$
 293   1      
 294   1              // $[XBR1 - Port I/O Crossbar 1]
 295   1              // [XBR1 - Port I/O Crossbar 1]$
 296   1      
 297   1      }
 298          
 299          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 300   1      
 301   1              // $[Timer Initialization]
 302   1              //Save Timer Configuration
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 6   

 303   1              U8 TCON_save;
 304   1              TCON_save = TCON;
 305   1              //Stop Timers
 306   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 307   1      
 308   1              // [Timer Initialization]$
 309   1      
 310   1              // $[TH0 - Timer 0 High Byte]
 311   1              // [TH0 - Timer 0 High Byte]$
 312   1      
 313   1              // $[TL0 - Timer 0 Low Byte]
 314   1              // [TL0 - Timer 0 Low Byte]$
 315   1      
 316   1              // $[TH1 - Timer 1 High Byte]
 317   1              /*
 318   1               // TH1 (Timer 1 High Byte) = 0xD5
 319   1               */
 320   1              TH1 = (0xD5 << TH1_TH1__SHIFT);
 321   1              // [TH1 - Timer 1 High Byte]$
 322   1      
 323   1              // $[TL1 - Timer 1 Low Byte]
 324   1              /*
 325   1               // TL1 (Timer 1 Low Byte) = 0xD5
 326   1               */
 327   1              TL1 = (0xD5 << TL1_TL1__SHIFT);
 328   1              // [TL1 - Timer 1 Low Byte]$
 329   1      
 330   1              // $[Timer Restoration]
 331   1              //Restore Timer Configuration
 332   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 333   1      
 334   1              // [Timer Restoration]$
 335   1      
 336   1      }
 337          
 338          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 339   1      
 340   1              // $[CKCON - Clock Control]
 341   1              // [CKCON - Clock Control]$
 342   1      
 343   1              // $[TMOD - Timer 0/1 Mode]
 344   1              /*
 345   1               // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 346   1               // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 347   1               //     on the clock defined by T0M in the CKCON register.)
 348   1               // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 349   1               //     irrespective of /INT0 logic level.)
 350   1               // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 351   1               //     Auto-Reload)
 352   1               // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 353   1               //     on the clock defined by T1M in the CKCON register.)
 354   1               // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 355   1               //     irrespective of /INT1 logic level.)
 356   1               */
 357   1              TMOD = TMOD_T0M__MODE0 | TMOD_CT0__TIMER | TMOD_GATE0__DISABLED
 358   1                              | TMOD_T1M__MODE2 | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 359   1              // [TMOD - Timer 0/1 Mode]$
 360   1      
 361   1              // $[TCON - Timer 0/1 Control]
 362   1              /*
 363   1               // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 364   1               */
 365   1              TCON |= TCON_TR1__RUN;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 7   

 366   1              // [TCON - Timer 0/1 Control]$
 367   1      
 368   1      }
 369          
 370          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 371   1      
 372   1              // $[SCON0 - UART0 Serial Port Control]
 373   1              /*
 374   1               // REN (Receive Enable) = RECEIVE_ENABLED (UART0 reception enabled.)
 375   1               */
 376   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 377   1              // [SCON0 - UART0 Serial Port Control]$
 378   1      
 379   1      }
 380          
 381          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 382   1      
 383   1              // $[Timer Initialization]
 384   1              // Save Timer Configuration
 385   1              U8 TMR3CN_TR3_save;
 386   1              TMR3CN_TR3_save = TMR3CN & TMR3CN_TR3__BMASK;
 387   1              // Stop Timer
 388   1              TMR3CN &= ~(TMR3CN_TR3__BMASK);
 389   1              // [Timer Initialization]$
 390   1      
 391   1              // $[TMR3CN - Timer 3 Control]
 392   1              // [TMR3CN - Timer 3 Control]$
 393   1      
 394   1              // $[TMR3H - Timer 3 High Byte]
 395   1              /*
 396   1               // TMR3H (Timer 3 High Byte) = 0xDF
 397   1               */
 398   1              TMR3H = (0xDF << TMR3H_TMR3H__SHIFT);
 399   1              // [TMR3H - Timer 3 High Byte]$
 400   1      
 401   1              // $[TMR3L - Timer 3 Low Byte]
 402   1              /*
 403   1               // TMR3L (Timer 3 Low Byte) = 0x72
 404   1               */
 405   1              TMR3L = (0x72 << TMR3L_TMR3L__SHIFT);
 406   1              // [TMR3L - Timer 3 Low Byte]$
 407   1      
 408   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 409   1              /*
 410   1               // TMR3RLH (Timer 3 Reload High Byte) = 0xDF
 411   1               */
 412   1              TMR3RLH = (0xDF << TMR3RLH_TMR3RLH__SHIFT);
 413   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 414   1      
 415   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 416   1              /*
 417   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x73
 418   1               */
 419   1              TMR3RLL = (0x73 << TMR3RLL_TMR3RLL__SHIFT);
 420   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 421   1      
 422   1              // $[TMR3CN]
 423   1              /*
 424   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 425   1               */
 426   1              TMR3CN |= TMR3CN_TR3__RUN;
 427   1              // [TMR3CN]$
 428   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 8   

 429   1              // $[Timer Restoration]
 430   1              // Restore Timer Configuration
 431   1              TMR3CN |= TMR3CN_TR3_save;
 432   1              // [Timer Restoration]$
 433   1      
 434   1      }
 435          
 436          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 437   1      
 438   1      }
 439          
 440          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 441   1      
 442   1              // $[EIE1 - Extended Interrupt Enable 1]
 443   1              /*
 444   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 445   1               //     ADC0 Conversion Complete interrupt.)
 446   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 447   1               //     interrupts.)
 448   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 449   1               //     interrupts.)
 450   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 451   1               //     (Disable all PCA0 interrupts.)
 452   1               // ERTC0A (RTC Alarm Interrupt Enable) = DISABLED (Disable RTC Alarm
 453   1               //     interrupts.)
 454   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 455   1               //     interrupts.)
 456   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 457   1               //     generated by the TF3L or TF3H flags.)
 458   1               // EWADC0 (Window Comparison ADC0 Interrupt Enable) = DISABLED (Disable
 459   1               //     ADC0 Window Comparison interrupt.)
 460   1               */
 461   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_ECP0__DISABLED | EIE1_ECP1__DISABLED
 462   1                              | EIE1_EPCA0__DISABLED | EIE1_ERTC0A__DISABLED
 463   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED | EIE1_EWADC0__DISABLED;
 464   1              // [EIE1 - Extended Interrupt Enable 1]$
 465   1      
 466   1              // $[EIP1 - Extended Interrupt Priority 1]
 467   1              // [EIP1 - Extended Interrupt Priority 1]$
 468   1      
 469   1              // $[IE - Interrupt Enable]
 470   1              /*
 471   1               // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 472   1               //     to its individual mask setting.)
 473   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 474   1               //     interrupt 0.)
 475   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 476   1               //     interrupt 1.)
 477   1               // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 478   1               //     interrupts.)
 479   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 480   1               //     interrupt.)
 481   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 482   1               //     interrupt.)
 483   1               // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 484   1               // ES0 (UART0 Interrupt Enable) = ENABLED (Enable UART0 interrupt.)
 485   1               */
 486   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 487   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 488   1                              | IE_ET2__DISABLED | IE_ES0__ENABLED;
 489   1              // [IE - Interrupt Enable]$
 490   1      
 491   1              // $[IP - Interrupt Priority]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 15:55:03 PAGE 9   

 492   1              // [IP - Interrupt Priority]$
 493   1      
 494   1              // $[EIE2 - Extended Interrupt Enable 2]
 495   1              // [EIE2 - Extended Interrupt Enable 2]$
 496   1      
 497   1              // $[EIP2 - Extended Interrupt Priority 2]
 498   1              // [EIP2 - Extended Interrupt Priority 2]$
 499   1      
 500   1      }
 501          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    136    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
