C51 COMPILER V9.53.0.0   CLAVIER                                                           04/29/2019 15:55:05 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CLAVIER
OBJECT MODULE PLACED IN .\src\clavier.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe \\calebasse\2160
                    -9785\Bureau\TP Micro S2\MCU8bits_RepEtudiants\HO_TASEVSKI\TP6\src\clavier.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WAR
                    -NINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(//calebasse/21609785/Bu
                    -reau/TP Micro S2/MCU8bits_RepEtudiants/HO_TASEVSKI/TP6/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//
                    -Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930;C:/SiliconLabs/Si
                    -mplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930/inc) PRINT(.\src\clavier.lst) COND PAGEWIDTH(120) PAGELENGT
                    -H(65) OBJECT(.\src\clavier.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Includes
   3          //-----------------------------------------------------------------------------
   4          #include <SI_C8051F930_Register_Enums.h>                // SFR declarations
   5          #include "clavier_port.h"
   6          #include "clavier.h"
   7          
   8          //-----------------------------------------------------------------------------
   9          // Activation:     Mettre X en PUSH_PULL  puis à 0
  10          //-----------------------------------------------------------------------------
  11          #define ACTIVATION_X1;    X1_PUSH_PULL; CLAVIER_X1=0;
  12          #define ACTIVATION_X2;    X2_PUSH_PULL; CLAVIER_X2=0;
  13          #define ACTIVATION_X3;    X3_PUSH_PULL; CLAVIER_X3=0;
  14          
  15          //-----------------------------------------------------------------------------
  16          // Désactivation   Mettre X à 1 puis en OPEN DRAIN
  17          //-----------------------------------------------------------------------------
  18          #define DESACTIVATION_X1; CLAVIER_X1=1; X1_OPEN_DRAIN;
  19          #define DESACTIVATION_X2; CLAVIER_X2=1; X2_OPEN_DRAIN;
  20          #define DESACTIVATION_X3; CLAVIER_X3=1; X3_OPEN_DRAIN;
  21          
  22          //-----------------------------------------------------------------------------
  23          // Attente pour un changement de niveau :  1 CLK
  24          //-----------------------------------------------------------------------------
  25          #define ATTENTE_NIVEAU_STABLE;  NOP();
  26          
  27          //-----------------------------------------------------------------------------
  28          // get_touche() Routine
  29          //
  30          // Parametre de sortie :
  31          //      = 0                     : si aucune touche appuyée
  32          //      = 0X7F                  : si plusieurs touches appuyées
  33          //      = code ASCII    : de l'unique touche appuyée
  34          //
  35          // ----------------------------------------------------------------------------
  36          char get_touche(void)
  37          {
  38   1              unsigned char code_ASCII;
  39   1              unsigned char nb_touche=0;
  40   1      
  41   1              ACTIVATION_X1;
  42   1              ATTENTE_NIVEAU_STABLE;
  43   1              if(CLAVIER_Y1==0) {code_ASCII='1';nb_touche++;}
  44   1              if(CLAVIER_Y2==0) {code_ASCII='4';nb_touche++;}
  45   1              if(CLAVIER_Y3==0) {code_ASCII='7';nb_touche++;}
  46   1              if(CLAVIER_Y4==0) {code_ASCII='*';nb_touche++;}
  47   1              DESACTIVATION_X1;
  48   1              ACTIVATION_X2;
  49   1              ATTENTE_NIVEAU_STABLE;
  50   1              if(CLAVIER_Y1==0) {code_ASCII='2';nb_touche++;}
C51 COMPILER V9.53.0.0   CLAVIER                                                           04/29/2019 15:55:05 PAGE 2   

  51   1              if(CLAVIER_Y2==0) {code_ASCII='5';nb_touche++;}
  52   1              if(CLAVIER_Y3==0) {code_ASCII='8';nb_touche++;}
  53   1              if(CLAVIER_Y4==0) {code_ASCII='0';nb_touche++;}
  54   1              DESACTIVATION_X2;
  55   1              ACTIVATION_X3;
  56   1              ATTENTE_NIVEAU_STABLE;
  57   1              if(CLAVIER_Y1==0) {code_ASCII='3';nb_touche++;}
  58   1              if(CLAVIER_Y2==0) {code_ASCII='6';nb_touche++;}
  59   1              if(CLAVIER_Y3==0) {code_ASCII='9';nb_touche++;}
  60   1              if(CLAVIER_Y4==0) {code_ASCII='#';nb_touche++;}
  61   1              DESACTIVATION_X3;
  62   1      
  63   1              if(nb_touche==0)                return(0);
  64   1              else if(nb_touche!=1)   return(0X7F);
  65   1              else                                    return(code_ASCII);
  66   1      }
  67          
  68          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    122    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
