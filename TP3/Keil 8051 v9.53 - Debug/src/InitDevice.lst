C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/18/2019 14:54:05 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe \\calebasse\2160
                    -9785\Bureau\TP Micro S2\MCU8bits_RepEtudiants\HO_TASEVSKI\TP3\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) 
                    -WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(//calebasse/21609785
                    -/Bureau/TP Micro S2/MCU8bits_RepEtudiants/HO_TASEVSKI/TP3/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v
                    -3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930;C:/SiliconLabs
                    -/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAG
                    -ELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_C8051F930_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          //==============================================================================
  17          // enter_DefaultMode_from_RESET
  18          //==============================================================================
  19          extern void enter_DefaultMode_from_RESET(void) {
  20   1              // $[Config Calls]
  21   1              PCA_0_enter_DefaultMode_from_RESET();
  22   1              CLOCK_0_enter_DefaultMode_from_RESET();
  23   1              PORTS_1_enter_DefaultMode_from_RESET();
  24   1              PBCFG_0_enter_DefaultMode_from_RESET();
  25   1              TIMER16_3_enter_DefaultMode_from_RESET();
  26   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  27   1              // [Config Calls]$
  28   1      
  29   1      }
  30          
  31          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  32   1      
  33   1              // $[Watchdog Disable]
  34   1              // Stop Watchdog
  35   1              // If MCU is reset by WDT before it runs to main(), please disable it in SILABS_STARTUP.A51
  36   1              SFRPAGE = 0x00;
  37   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  38   1      
  39   1              // [Watchdog Disable]$
  40   1      
  41   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]
  42   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]$
  43   1      
  44   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
  45   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
  46   1      
  47   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
  48   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
  49   1      
  50   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/18/2019 14:54:05 PAGE 2   

  51   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
  52   1      
  53   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
  54   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
  55   1      
  56   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
  57   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
  58   1      
  59   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  60   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
  61   1      
  62   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
  63   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
  64   1      
  65   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
  66   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
  67   1      
  68   1              // $[PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]
  69   1              // [PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]$
  70   1      
  71   1              // $[PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]
  72   1              // [PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]$
  73   1      
  74   1              // $[PCA0CPH3 - PCA Channel 3 Capture Module High Byte]
  75   1              // [PCA0CPH3 - PCA Channel 3 Capture Module High Byte]$
  76   1      
  77   1              // $[PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]
  78   1              // [PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]$
  79   1      
  80   1              // $[PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]
  81   1              // [PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]$
  82   1      
  83   1              // $[PCA0CPH4 - PCA Channel 4 Capture Module High Byte]
  84   1              // [PCA0CPH4 - PCA Channel 4 Capture Module High Byte]$
  85   1      
  86   1              // $[PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]
  87   1              // [PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]$
  88   1      
  89   1              // $[PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]
  90   1              /*
  91   1               // PCA0CPL5 (PCA Channel 5 Capture Module Low Byte) = 0x22
  92   1               */
  93   1              PCA0CPL5 = (0x22 << PCA0CPL5_PCA0CPL5__SHIFT);
  94   1              // [PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]$
  95   1      
  96   1              // $[PCA0CPH5 - PCA Channel 5 Capture Module High Byte]
  97   1              // [PCA0CPH5 - PCA Channel 5 Capture Module High Byte]$
  98   1      
  99   1              // $[PCA0CN - PCA Control]
 100   1              /*
 101   1               // CR (PCA Counter/Timer Run Control) = RUN (Start the PCA Counter/Timer
 102   1               //     running.)
 103   1               */
 104   1              PCA0CN = PCA0CN_CR__RUN;
 105   1              // [PCA0CN - PCA Control]$
 106   1      
 107   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 108   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 109   1      
 110   1              // $[PCA0H - PCA Counter/Timer High Byte]
 111   1              // [PCA0H - PCA Counter/Timer High Byte]$
 112   1      
 113   1              // $[PCA0PWM - PCA PWM Configuration]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/18/2019 14:54:05 PAGE 3   

 114   1              // [PCA0PWM - PCA PWM Configuration]$
 115   1      
 116   1              // $[PCA0MD - PCA Mode]
 117   1              // [PCA0MD - PCA Mode]$
 118   1      
 119   1              // $[WDT - Watchdog run Control]
 120   1              // Watchdog is enabled
 121   1              PCA0MD |= PCA0MD_WDTE__ENABLED;
 122   1      
 123   1              // Reset WDT timer
 124   1              PCA0CPH5 = 0;
 125   1      
 126   1              // [WDT - Watchdog run Control]$
 127   1      
 128   1      }
 129          
 130          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 131   1      
 132   1              // $[CLKSEL - Clock Select]
 133   1              /*
 134   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_2 (SYSCLK is equal to
 135   1               //     selected clock source divided by 2.)
 136   1               // CLKSL (Clock Source Select) = LPOSC (Clock derived from the Internal
 137   1               //     Low Power Oscillator.)
 138   1               */
 139   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_2 | CLKSEL_CLKSL__LPOSC;
 140   1              // Wait for the clock to be ready
 141   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 142   1                      ;
 143   1              // [CLKSEL - Clock Select]$
 144   1      
 145   1      }
 146          
 147          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 148   1      
 149   1      }
 150          
 151          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 152   1      
 153   1              // $[P1 - Port 1 Pin Latch]
 154   1              // [P1 - Port 1 Pin Latch]$
 155   1      
 156   1              // $[P1MDOUT - Port 1 Output Mode]
 157   1              /*
 158   1               // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 159   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 160   1               //     drain.)
 161   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 162   1               //     drain.)
 163   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 164   1               //     drain.)
 165   1               // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 166   1               //     drain.)
 167   1               // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 168   1               //     drain.)
 169   1               // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 170   1               //     drain.)
 171   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 172   1               //     drain.)
 173   1               */
 174   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 175   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 176   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/18/2019 14:54:05 PAGE 4   

 177   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 178   1              // [P1MDOUT - Port 1 Output Mode]$
 179   1      
 180   1              // $[P1MDIN - Port 1 Input Mode]
 181   1              // [P1MDIN - Port 1 Input Mode]$
 182   1      
 183   1              // $[P1SKIP - Port 1 Skip]
 184   1              // [P1SKIP - Port 1 Skip]$
 185   1      
 186   1              // $[P1MASK - Port 1 Mask]
 187   1              // [P1MASK - Port 1 Mask]$
 188   1      
 189   1              // $[P1MAT - Port 1 Match]
 190   1              // [P1MAT - Port 1 Match]$
 191   1      
 192   1              // $[P1DRV - Port 1 Drive Strength]
 193   1              // [P1DRV - Port 1 Drive Strength]$
 194   1      
 195   1      }
 196          
 197          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 198   1      
 199   1              // $[XBR2 - Port I/O Crossbar 2]
 200   1              /*
 201   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 202   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 203   1               //     mode).)
 204   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 205   1               */
 206   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 207   1              // [XBR2 - Port I/O Crossbar 2]$
 208   1      
 209   1              // $[XBR0 - Port I/O Crossbar 0]
 210   1              // [XBR0 - Port I/O Crossbar 0]$
 211   1      
 212   1              // $[XBR1 - Port I/O Crossbar 1]
 213   1              // [XBR1 - Port I/O Crossbar 1]$
 214   1      
 215   1      }
 216          
 217          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 218   1      
 219   1      }
 220          
 221          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 222   1      
 223   1              // $[CKCON - Clock Control]
 224   1              // [CKCON - Clock Control]$
 225   1      
 226   1              // $[TMOD - Timer 0/1 Mode]
 227   1              // [TMOD - Timer 0/1 Mode]$
 228   1      
 229   1              // $[TCON - Timer 0/1 Control]
 230   1              // [TCON - Timer 0/1 Control]$
 231   1      
 232   1      }
 233          
 234          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 235   1      
 236   1      }
 237          
 238          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 239   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/18/2019 14:54:05 PAGE 5   

 240   1              // $[Timer Initialization]
 241   1              // Save Timer Configuration
 242   1              U8 TMR3CN_TR3_save;
 243   1              TMR3CN_TR3_save = TMR3CN & TMR3CN_TR3__BMASK;
 244   1              // Stop Timer
 245   1              TMR3CN &= ~(TMR3CN_TR3__BMASK);
 246   1              // [Timer Initialization]$
 247   1      
 248   1              // $[TMR3CN - Timer 3 Control]
 249   1              // [TMR3CN - Timer 3 Control]$
 250   1      
 251   1              // $[TMR3H - Timer 3 High Byte]
 252   1              /*
 253   1               // TMR3H (Timer 3 High Byte) = 0xDF
 254   1               */
 255   1              TMR3H = (0xDF << TMR3H_TMR3H__SHIFT);
 256   1              // [TMR3H - Timer 3 High Byte]$
 257   1      
 258   1              // $[TMR3L - Timer 3 Low Byte]
 259   1              /*
 260   1               // TMR3L (Timer 3 Low Byte) = 0x72
 261   1               */
 262   1              TMR3L = (0x72 << TMR3L_TMR3L__SHIFT);
 263   1              // [TMR3L - Timer 3 Low Byte]$
 264   1      
 265   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 266   1              /*
 267   1               // TMR3RLH (Timer 3 Reload High Byte) = 0xDF
 268   1               */
 269   1              TMR3RLH = (0xDF << TMR3RLH_TMR3RLH__SHIFT);
 270   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 271   1      
 272   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 273   1              /*
 274   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x73
 275   1               */
 276   1              TMR3RLL = (0x73 << TMR3RLL_TMR3RLL__SHIFT);
 277   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 278   1      
 279   1              // $[TMR3CN]
 280   1              /*
 281   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 282   1               */
 283   1              TMR3CN |= TMR3CN_TR3__RUN;
 284   1              // [TMR3CN]$
 285   1      
 286   1              // $[Timer Restoration]
 287   1              // Restore Timer Configuration
 288   1              TMR3CN |= TMR3CN_TR3_save;
 289   1              // [Timer Restoration]$
 290   1      
 291   1      }
 292          
 293          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 294   1      
 295   1      }
 296          
 297          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 298   1      
 299   1              // $[EIE1 - Extended Interrupt Enable 1]
 300   1              /*
 301   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 302   1               //     ADC0 Conversion Complete interrupt.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/18/2019 14:54:05 PAGE 6   

 303   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 304   1               //     interrupts.)
 305   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 306   1               //     interrupts.)
 307   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 308   1               //     (Disable all PCA0 interrupts.)
 309   1               // ERTC0A (RTC Alarm Interrupt Enable) = DISABLED (Disable RTC Alarm
 310   1               //     interrupts.)
 311   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 312   1               //     interrupts.)
 313   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 314   1               //     generated by the TF3L or TF3H flags.)
 315   1               // EWADC0 (Window Comparison ADC0 Interrupt Enable) = DISABLED (Disable
 316   1               //     ADC0 Window Comparison interrupt.)
 317   1               */
 318   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_ECP0__DISABLED | EIE1_ECP1__DISABLED
 319   1                              | EIE1_EPCA0__DISABLED | EIE1_ERTC0A__DISABLED
 320   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED | EIE1_EWADC0__DISABLED;
 321   1              // [EIE1 - Extended Interrupt Enable 1]$
 322   1      
 323   1              // $[EIP1 - Extended Interrupt Priority 1]
 324   1              // [EIP1 - Extended Interrupt Priority 1]$
 325   1      
 326   1              // $[IE - Interrupt Enable]
 327   1              /*
 328   1               // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 329   1               //     to its individual mask setting.)
 330   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 331   1               //     interrupt 0.)
 332   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 333   1               //     interrupt 1.)
 334   1               // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 335   1               //     interrupts.)
 336   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 337   1               //     interrupt.)
 338   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 339   1               //     interrupt.)
 340   1               // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 341   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 342   1               */
 343   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 344   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 345   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 346   1              // [IE - Interrupt Enable]$
 347   1      
 348   1              // $[IP - Interrupt Priority]
 349   1              // [IP - Interrupt Priority]$
 350   1      
 351   1              // $[EIE2 - Extended Interrupt Enable 2]
 352   1              // [EIE2 - Extended Interrupt Enable 2]$
 353   1      
 354   1              // $[EIP2 - Extended Interrupt Priority 2]
 355   1              // [EIP2 - Extended Interrupt Priority 2]$
 356   1      
 357   1      }
 358          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     90    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/18/2019 14:54:05 PAGE 7   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
