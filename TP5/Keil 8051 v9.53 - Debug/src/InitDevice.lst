C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 13:12:48 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe \\calebasse\2160
                    -9785\Bureau\TP Micro S2\MCU8bits_RepEtudiants\HO_TASEVSKI\TP5\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) 
                    -WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(//calebasse/21609785
                    -/Bureau/TP Micro S2/MCU8bits_RepEtudiants/HO_TASEVSKI/TP5/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v
                    -3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930;C:/SiliconLabs
                    -/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAG
                    -ELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_C8051F930_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          //==============================================================================
  17          // enter_DefaultMode_from_RESET
  18          //==============================================================================
  19          extern void enter_DefaultMode_from_RESET(void) {
  20   1              // $[Config Calls]
  21   1              PCA_0_enter_DefaultMode_from_RESET();
  22   1              CLOCK_0_enter_DefaultMode_from_RESET();
  23   1              PORTS_1_enter_DefaultMode_from_RESET();
  24   1              PBCFG_0_enter_DefaultMode_from_RESET();
  25   1              TIMER16_3_enter_DefaultMode_from_RESET();
  26   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  27   1              // [Config Calls]$
  28   1      
  29   1      }
  30          
  31          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  32   1      
  33   1              // $[Watchdog Disable]
  34   1              // Stop Watchdog
  35   1              // If MCU is reset by WDT before it runs to main(), please disable it in SILABS_STARTUP.A51
  36   1              SFRPAGE = 0x00;
  37   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  38   1      
  39   1              // [Watchdog Disable]$
  40   1      
  41   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]
  42   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]$
  43   1      
  44   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
  45   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
  46   1      
  47   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
  48   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
  49   1      
  50   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 13:12:48 PAGE 2   

  51   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
  52   1      
  53   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
  54   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
  55   1      
  56   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
  57   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
  58   1      
  59   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  60   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
  61   1      
  62   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
  63   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
  64   1      
  65   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
  66   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
  67   1      
  68   1              // $[PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]
  69   1              // [PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]$
  70   1      
  71   1              // $[PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]
  72   1              // [PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]$
  73   1      
  74   1              // $[PCA0CPH3 - PCA Channel 3 Capture Module High Byte]
  75   1              // [PCA0CPH3 - PCA Channel 3 Capture Module High Byte]$
  76   1      
  77   1              // $[PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]
  78   1              // [PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]$
  79   1      
  80   1              // $[PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]
  81   1              // [PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]$
  82   1      
  83   1              // $[PCA0CPH4 - PCA Channel 4 Capture Module High Byte]
  84   1              // [PCA0CPH4 - PCA Channel 4 Capture Module High Byte]$
  85   1      
  86   1              // $[PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]
  87   1              /*
  88   1               // ECCF (Channel 5 Capture/Compare Flag Interrupt Enable) = DISABLED
  89   1               //     (Disable CCF5 interrupts.)
  90   1               // MAT (Channel 5 Match Function Enable) = ENABLED (Enable match
  91   1               //     function.)
  92   1               // CAPN (Channel 5 Capture Negative Function Enable) = DISABLED (Disable
  93   1               //     negative edge capture.)
  94   1               // PWM16 (Channel 5 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
  95   1               //     11-bit PWM selected.)
  96   1               // CAPP (Channel 5 Capture Positive Function Enable) = DISABLED (Disable
  97   1               //     positive edge capture.)
  98   1               // ECOM (Channel 5 Comparator Function Enable) = ENABLED (Enable
  99   1               //     comparator function.)
 100   1               // PWM (Channel 5 Pulse Width Modulation Mode Enable) = DISABLED (Disable
 101   1               //     PWM function.)
 102   1               // TOG (Channel 5 Toggle Function Enable) = DISABLED (Disable toggle
 103   1               //     function.)
 104   1               */
 105   1              PCA0CPM5 = PCA0CPM5_ECCF__DISABLED | PCA0CPM5_MAT__ENABLED
 106   1                              | PCA0CPM5_CAPN__DISABLED | PCA0CPM5_PWM16__8_BIT
 107   1                              | PCA0CPM5_CAPP__DISABLED | PCA0CPM5_ECOM__ENABLED
 108   1                              | PCA0CPM5_PWM__DISABLED | PCA0CPM5_TOG__DISABLED;
 109   1              // [PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]$
 110   1      
 111   1              // $[PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]
 112   1              /*
 113   1               // PCA0CPL5 (PCA Channel 5 Capture Module Low Byte) = 0x22
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 13:12:48 PAGE 3   

 114   1               */
 115   1              PCA0CPL5 = (0x22 << PCA0CPL5_PCA0CPL5__SHIFT);
 116   1              // [PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]$
 117   1      
 118   1              // $[PCA0CPH5 - PCA Channel 5 Capture Module High Byte]
 119   1              // [PCA0CPH5 - PCA Channel 5 Capture Module High Byte]$
 120   1      
 121   1              // $[PCA0CN - PCA Control]
 122   1              /*
 123   1               // CR (PCA Counter/Timer Run Control) = RUN (Start the PCA Counter/Timer
 124   1               //     running.)
 125   1               */
 126   1              PCA0CN = PCA0CN_CR__RUN;
 127   1              // [PCA0CN - PCA Control]$
 128   1      
 129   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 130   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 131   1      
 132   1              // $[PCA0H - PCA Counter/Timer High Byte]
 133   1              // [PCA0H - PCA Counter/Timer High Byte]$
 134   1      
 135   1              // $[PCA0PWM - PCA PWM Configuration]
 136   1              // [PCA0PWM - PCA PWM Configuration]$
 137   1      
 138   1              // $[PCA0MD - PCA Mode]
 139   1              // [PCA0MD - PCA Mode]$
 140   1      
 141   1              // $[WDT - Watchdog run Control]
 142   1              // [WDT - Watchdog run Control]$
 143   1      
 144   1      }
 145          
 146          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 147   1      
 148   1              // $[CLKSEL - Clock Select]
 149   1              /*
 150   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_2 (SYSCLK is equal to
 151   1               //     selected clock source divided by 2.)
 152   1               // CLKSL (Clock Source Select) = LPOSC (Clock derived from the Internal
 153   1               //     Low Power Oscillator.)
 154   1               */
 155   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_2 | CLKSEL_CLKSL__LPOSC;
 156   1              // Wait for the clock to be ready
 157   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 158   1                      ;
 159   1              // [CLKSEL - Clock Select]$
 160   1      
 161   1      }
 162          
 163          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 164   1      
 165   1      }
 166          
 167          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 168   1      
 169   1              // $[P1 - Port 1 Pin Latch]
 170   1              // [P1 - Port 1 Pin Latch]$
 171   1      
 172   1              // $[P1MDOUT - Port 1 Output Mode]
 173   1              /*
 174   1               // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 175   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 176   1               //     drain.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 13:12:48 PAGE 4   

 177   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 178   1               //     drain.)
 179   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 180   1               //     drain.)
 181   1               // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 182   1               //     drain.)
 183   1               // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 184   1               //     drain.)
 185   1               // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 186   1               //     drain.)
 187   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 188   1               //     drain.)
 189   1               */
 190   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 191   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 192   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 193   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 194   1              // [P1MDOUT - Port 1 Output Mode]$
 195   1      
 196   1              // $[P1MDIN - Port 1 Input Mode]
 197   1              // [P1MDIN - Port 1 Input Mode]$
 198   1      
 199   1              // $[P1SKIP - Port 1 Skip]
 200   1              // [P1SKIP - Port 1 Skip]$
 201   1      
 202   1              // $[P1MASK - Port 1 Mask]
 203   1              // [P1MASK - Port 1 Mask]$
 204   1      
 205   1              // $[P1MAT - Port 1 Match]
 206   1              // [P1MAT - Port 1 Match]$
 207   1      
 208   1              // $[P1DRV - Port 1 Drive Strength]
 209   1              // [P1DRV - Port 1 Drive Strength]$
 210   1      
 211   1      }
 212          
 213          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 214   1      
 215   1              // $[XBR2 - Port I/O Crossbar 2]
 216   1              /*
 217   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 218   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 219   1               //     mode).)
 220   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 221   1               */
 222   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 223   1              // [XBR2 - Port I/O Crossbar 2]$
 224   1      
 225   1              // $[XBR0 - Port I/O Crossbar 0]
 226   1              // [XBR0 - Port I/O Crossbar 0]$
 227   1      
 228   1              // $[XBR1 - Port I/O Crossbar 1]
 229   1              // [XBR1 - Port I/O Crossbar 1]$
 230   1      
 231   1      }
 232          
 233          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 234   1      
 235   1      }
 236          
 237          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 238   1      
 239   1              // $[CKCON - Clock Control]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 13:12:48 PAGE 5   

 240   1              // [CKCON - Clock Control]$
 241   1      
 242   1              // $[TMOD - Timer 0/1 Mode]
 243   1              // [TMOD - Timer 0/1 Mode]$
 244   1      
 245   1              // $[TCON - Timer 0/1 Control]
 246   1              // [TCON - Timer 0/1 Control]$
 247   1      
 248   1      }
 249          
 250          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 251   1      
 252   1      }
 253          
 254          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 255   1      
 256   1              // $[Timer Initialization]
 257   1              // Save Timer Configuration
 258   1              U8 TMR3CN_TR3_save;
 259   1              TMR3CN_TR3_save = TMR3CN & TMR3CN_TR3__BMASK;
 260   1              // Stop Timer
 261   1              TMR3CN &= ~(TMR3CN_TR3__BMASK);
 262   1              // [Timer Initialization]$
 263   1      
 264   1              // $[TMR3CN - Timer 3 Control]
 265   1              // [TMR3CN - Timer 3 Control]$
 266   1      
 267   1              // $[TMR3H - Timer 3 High Byte]
 268   1              /*
 269   1               // TMR3H (Timer 3 High Byte) = 0xDF
 270   1               */
 271   1              TMR3H = (0xDF << TMR3H_TMR3H__SHIFT);
 272   1              // [TMR3H - Timer 3 High Byte]$
 273   1      
 274   1              // $[TMR3L - Timer 3 Low Byte]
 275   1              /*
 276   1               // TMR3L (Timer 3 Low Byte) = 0x72
 277   1               */
 278   1              TMR3L = (0x72 << TMR3L_TMR3L__SHIFT);
 279   1              // [TMR3L - Timer 3 Low Byte]$
 280   1      
 281   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 282   1              /*
 283   1               // TMR3RLH (Timer 3 Reload High Byte) = 0xDF
 284   1               */
 285   1              TMR3RLH = (0xDF << TMR3RLH_TMR3RLH__SHIFT);
 286   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 287   1      
 288   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 289   1              /*
 290   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x73
 291   1               */
 292   1              TMR3RLL = (0x73 << TMR3RLL_TMR3RLL__SHIFT);
 293   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 294   1      
 295   1              // $[TMR3CN]
 296   1              /*
 297   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 298   1               */
 299   1              TMR3CN |= TMR3CN_TR3__RUN;
 300   1              // [TMR3CN]$
 301   1      
 302   1              // $[Timer Restoration]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 13:12:48 PAGE 6   

 303   1              // Restore Timer Configuration
 304   1              TMR3CN |= TMR3CN_TR3_save;
 305   1              // [Timer Restoration]$
 306   1      
 307   1      }
 308          
 309          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 310   1      
 311   1      }
 312          
 313          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 314   1      
 315   1              // $[EIE1 - Extended Interrupt Enable 1]
 316   1              /*
 317   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 318   1               //     ADC0 Conversion Complete interrupt.)
 319   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 320   1               //     interrupts.)
 321   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 322   1               //     interrupts.)
 323   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 324   1               //     (Disable all PCA0 interrupts.)
 325   1               // ERTC0A (RTC Alarm Interrupt Enable) = DISABLED (Disable RTC Alarm
 326   1               //     interrupts.)
 327   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 328   1               //     interrupts.)
 329   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 330   1               //     generated by the TF3L or TF3H flags.)
 331   1               // EWADC0 (Window Comparison ADC0 Interrupt Enable) = DISABLED (Disable
 332   1               //     ADC0 Window Comparison interrupt.)
 333   1               */
 334   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_ECP0__DISABLED | EIE1_ECP1__DISABLED
 335   1                              | EIE1_EPCA0__DISABLED | EIE1_ERTC0A__DISABLED
 336   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED | EIE1_EWADC0__DISABLED;
 337   1              // [EIE1 - Extended Interrupt Enable 1]$
 338   1      
 339   1              // $[EIP1 - Extended Interrupt Priority 1]
 340   1              // [EIP1 - Extended Interrupt Priority 1]$
 341   1      
 342   1              // $[IE - Interrupt Enable]
 343   1              /*
 344   1               // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 345   1               //     to its individual mask setting.)
 346   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 347   1               //     interrupt 0.)
 348   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 349   1               //     interrupt 1.)
 350   1               // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 351   1               //     interrupts.)
 352   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 353   1               //     interrupt.)
 354   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 355   1               //     interrupt.)
 356   1               // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 357   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 358   1               */
 359   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 360   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 361   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 362   1              // [IE - Interrupt Enable]$
 363   1      
 364   1              // $[IP - Interrupt Priority]
 365   1              // [IP - Interrupt Priority]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/29/2019 13:12:48 PAGE 7   

 366   1      
 367   1              // $[EIE2 - Extended Interrupt Enable 2]
 368   1              // [EIE2 - Extended Interrupt Enable 2]$
 369   1      
 370   1              // $[EIP2 - Extended Interrupt Priority 2]
 371   1              // [EIP2 - Extended Interrupt Priority 2]$
 372   1      
 373   1      }
 374          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     88    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
