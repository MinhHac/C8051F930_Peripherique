C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/04/2019 15:08:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe \\calebasse\2160
                    -9785\Bureau\TP Micro\MCU8bits_RepEtudiants\HO_TASEVSKI\TP1\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WAR
                    -NINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(//calebasse/21609785/Bu
                    -reau/TP Micro/MCU8bits_RepEtudiants/HO_TASEVSKI/TP1/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Dev
                    -ice/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930;C:/SiliconLabs/Simpl
                    -icityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGT
                    -H(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_C8051F930_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          //==============================================================================
  17          // enter_DefaultMode_from_RESET
  18          //==============================================================================
  19          extern void enter_DefaultMode_from_RESET(void) {
  20   1              // $[Config Calls]
  21   1              PCA_0_enter_DefaultMode_from_RESET();
  22   1              CLOCK_0_enter_DefaultMode_from_RESET();
  23   1              PORTS_1_enter_DefaultMode_from_RESET();
  24   1              PBCFG_0_enter_DefaultMode_from_RESET();
  25   1              TIMER16_3_enter_DefaultMode_from_RESET();
  26   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  27   1              // [Config Calls]$
  28   1      
  29   1      }
  30          
  31          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  32   1      
  33   1              // $[Watchdog Disable]
  34   1              // Stop Watchdog
  35   1              // If MCU is reset by WDT before it runs to main(), please disable it in SILABS_STARTUP.A51
  36   1              SFRPAGE = 0x00;
  37   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  38   1      
  39   1              // [Watchdog Disable]$
  40   1      
  41   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]
  42   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]$
  43   1      
  44   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
  45   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
  46   1      
  47   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
  48   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
  49   1      
  50   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/04/2019 15:08:02 PAGE 2   

  51   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
  52   1      
  53   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
  54   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
  55   1      
  56   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
  57   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
  58   1      
  59   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  60   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
  61   1      
  62   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
  63   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
  64   1      
  65   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
  66   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
  67   1      
  68   1              // $[PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]
  69   1              // [PCA0CPM3 - PCA Channel 3 Capture/Compare Mode]$
  70   1      
  71   1              // $[PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]
  72   1              // [PCA0CPL3 - PCA Channel 3 Capture Module Low Byte]$
  73   1      
  74   1              // $[PCA0CPH3 - PCA Channel 3 Capture Module High Byte]
  75   1              // [PCA0CPH3 - PCA Channel 3 Capture Module High Byte]$
  76   1      
  77   1              // $[PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]
  78   1              // [PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]$
  79   1      
  80   1              // $[PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]
  81   1              // [PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]$
  82   1      
  83   1              // $[PCA0CPH4 - PCA Channel 4 Capture Module High Byte]
  84   1              // [PCA0CPH4 - PCA Channel 4 Capture Module High Byte]$
  85   1      
  86   1              // $[PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]
  87   1              // [PCA0CPM5 - PCA Channel 5 Capture/Compare Mode]$
  88   1      
  89   1              // $[PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]
  90   1              /*
  91   1               // PCA0CPL5 (PCA Channel 5 Capture Module Low Byte) = 0x02
  92   1               */
  93   1              PCA0CPL5 = (0x02 << PCA0CPL5_PCA0CPL5__SHIFT);
  94   1              // [PCA0CPL5 - PCA Channel 5 Capture Module Low Byte]$
  95   1      
  96   1              // $[PCA0CPH5 - PCA Channel 5 Capture Module High Byte]
  97   1              // [PCA0CPH5 - PCA Channel 5 Capture Module High Byte]$
  98   1      
  99   1              // $[PCA0CN - PCA Control]
 100   1              // [PCA0CN - PCA Control]$
 101   1      
 102   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 103   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 104   1      
 105   1              // $[PCA0H - PCA Counter/Timer High Byte]
 106   1              // [PCA0H - PCA Counter/Timer High Byte]$
 107   1      
 108   1              // $[PCA0PWM - PCA PWM Configuration]
 109   1              // [PCA0PWM - PCA PWM Configuration]$
 110   1      
 111   1              // $[PCA0MD - PCA Mode]
 112   1              // [PCA0MD - PCA Mode]$
 113   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/04/2019 15:08:02 PAGE 3   

 114   1              // $[WDT - Watchdog run Control]
 115   1              // [WDT - Watchdog run Control]$
 116   1      
 117   1      }
 118          
 119          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 120   1      
 121   1              // $[CLKSEL - Clock Select]
 122   1              /*
 123   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_2 (SYSCLK is equal to
 124   1               //     selected clock source divided by 2.)
 125   1               // CLKSL (Clock Source Select) = LPOSC (Clock derived from the Internal
 126   1               //     Low Power Oscillator.)
 127   1               */
 128   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_2 | CLKSEL_CLKSL__LPOSC;
 129   1              // Wait for the clock to be ready
 130   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 131   1                      ;
 132   1              // [CLKSEL - Clock Select]$
 133   1      
 134   1      }
 135          
 136          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 137   1      
 138   1      }
 139          
 140          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 141   1      
 142   1              // $[P1 - Port 1 Pin Latch]
 143   1              // [P1 - Port 1 Pin Latch]$
 144   1      
 145   1              // $[P1MDOUT - Port 1 Output Mode]
 146   1              /*
 147   1               // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 148   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 149   1               //     drain.)
 150   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 151   1               //     drain.)
 152   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 153   1               //     drain.)
 154   1               // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 155   1               //     drain.)
 156   1               // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 157   1               //     drain.)
 158   1               // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 159   1               //     drain.)
 160   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 161   1               //     drain.)
 162   1               */
 163   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 164   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 165   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 166   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 167   1              // [P1MDOUT - Port 1 Output Mode]$
 168   1      
 169   1              // $[P1MDIN - Port 1 Input Mode]
 170   1              // [P1MDIN - Port 1 Input Mode]$
 171   1      
 172   1              // $[P1SKIP - Port 1 Skip]
 173   1              // [P1SKIP - Port 1 Skip]$
 174   1      
 175   1              // $[P1MASK - Port 1 Mask]
 176   1              // [P1MASK - Port 1 Mask]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/04/2019 15:08:02 PAGE 4   

 177   1      
 178   1              // $[P1MAT - Port 1 Match]
 179   1              // [P1MAT - Port 1 Match]$
 180   1      
 181   1              // $[P1DRV - Port 1 Drive Strength]
 182   1              // [P1DRV - Port 1 Drive Strength]$
 183   1      
 184   1      }
 185          
 186          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 187   1      
 188   1              // $[XBR2 - Port I/O Crossbar 2]
 189   1              /*
 190   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 191   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 192   1               //     mode).)
 193   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 194   1               */
 195   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 196   1              // [XBR2 - Port I/O Crossbar 2]$
 197   1      
 198   1              // $[XBR0 - Port I/O Crossbar 0]
 199   1              // [XBR0 - Port I/O Crossbar 0]$
 200   1      
 201   1              // $[XBR1 - Port I/O Crossbar 1]
 202   1              // [XBR1 - Port I/O Crossbar 1]$
 203   1      
 204   1      }
 205          
 206          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 207   1      
 208   1      }
 209          
 210          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 211   1      
 212   1              // $[CKCON - Clock Control]
 213   1              // [CKCON - Clock Control]$
 214   1      
 215   1              // $[TMOD - Timer 0/1 Mode]
 216   1              // [TMOD - Timer 0/1 Mode]$
 217   1      
 218   1              // $[TCON - Timer 0/1 Control]
 219   1              // [TCON - Timer 0/1 Control]$
 220   1      
 221   1      }
 222          
 223          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 224   1      
 225   1      }
 226          
 227          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 228   1      
 229   1              // $[Timer Initialization]
 230   1              // Save Timer Configuration
 231   1              U8 TMR3CN_TR3_save;
 232   1              TMR3CN_TR3_save = TMR3CN & TMR3CN_TR3__BMASK;
 233   1              // Stop Timer
 234   1              TMR3CN &= ~(TMR3CN_TR3__BMASK);
 235   1              // [Timer Initialization]$
 236   1      
 237   1              // $[TMR3CN - Timer 3 Control]
 238   1              // [TMR3CN - Timer 3 Control]$
 239   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/04/2019 15:08:02 PAGE 5   

 240   1              // $[TMR3H - Timer 3 High Byte]
 241   1              /*
 242   1               // TMR3H (Timer 3 High Byte) = 0xDF
 243   1               */
 244   1              TMR3H = (0xDF << TMR3H_TMR3H__SHIFT);
 245   1              // [TMR3H - Timer 3 High Byte]$
 246   1      
 247   1              // $[TMR3L - Timer 3 Low Byte]
 248   1              /*
 249   1               // TMR3L (Timer 3 Low Byte) = 0x72
 250   1               */
 251   1              TMR3L = (0x72 << TMR3L_TMR3L__SHIFT);
 252   1              // [TMR3L - Timer 3 Low Byte]$
 253   1      
 254   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 255   1              /*
 256   1               // TMR3RLH (Timer 3 Reload High Byte) = 0xDF
 257   1               */
 258   1              TMR3RLH = (0xDF << TMR3RLH_TMR3RLH__SHIFT);
 259   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 260   1      
 261   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 262   1              /*
 263   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x73
 264   1               */
 265   1              TMR3RLL = (0x73 << TMR3RLL_TMR3RLL__SHIFT);
 266   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 267   1      
 268   1              // $[TMR3CN]
 269   1              /*
 270   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 271   1               */
 272   1              TMR3CN |= TMR3CN_TR3__RUN;
 273   1              // [TMR3CN]$
 274   1      
 275   1              // $[Timer Restoration]
 276   1              // Restore Timer Configuration
 277   1              TMR3CN |= TMR3CN_TR3_save;
 278   1              // [Timer Restoration]$
 279   1      
 280   1      }
 281          
 282          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 283   1      
 284   1      }
 285          
 286          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 287   1      
 288   1              // $[EIE1 - Extended Interrupt Enable 1]
 289   1              /*
 290   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 291   1               //     ADC0 Conversion Complete interrupt.)
 292   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 293   1               //     interrupts.)
 294   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 295   1               //     interrupts.)
 296   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 297   1               //     (Disable all PCA0 interrupts.)
 298   1               // ERTC0A (RTC Alarm Interrupt Enable) = DISABLED (Disable RTC Alarm
 299   1               //     interrupts.)
 300   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 301   1               //     interrupts.)
 302   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
C51 COMPILER V9.53.0.0   INITDEVICE                                                        03/04/2019 15:08:02 PAGE 6   

 303   1               //     generated by the TF3L or TF3H flags.)
 304   1               // EWADC0 (Window Comparison ADC0 Interrupt Enable) = DISABLED (Disable
 305   1               //     ADC0 Window Comparison interrupt.)
 306   1               */
 307   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_ECP0__DISABLED | EIE1_ECP1__DISABLED
 308   1                              | EIE1_EPCA0__DISABLED | EIE1_ERTC0A__DISABLED
 309   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED | EIE1_EWADC0__DISABLED;
 310   1              // [EIE1 - Extended Interrupt Enable 1]$
 311   1      
 312   1              // $[EIP1 - Extended Interrupt Priority 1]
 313   1              // [EIP1 - Extended Interrupt Priority 1]$
 314   1      
 315   1              // $[IE - Interrupt Enable]
 316   1              /*
 317   1               // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 318   1               //     to its individual mask setting.)
 319   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 320   1               //     interrupt 0.)
 321   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 322   1               //     interrupt 1.)
 323   1               // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 324   1               //     interrupts.)
 325   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 326   1               //     interrupt.)
 327   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 328   1               //     interrupt.)
 329   1               // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 330   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 331   1               */
 332   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 333   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 334   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 335   1              // [IE - Interrupt Enable]$
 336   1      
 337   1              // $[IP - Interrupt Priority]
 338   1              // [IP - Interrupt Priority]$
 339   1      
 340   1              // $[EIE2 - Extended Interrupt Enable 2]
 341   1              // [EIE2 - Extended Interrupt Enable 2]$
 342   1      
 343   1              // $[EIP2 - Extended Interrupt Priority 2]
 344   1              // [EIP2 - Extended Interrupt Priority 2]$
 345   1      
 346   1      }
 347          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     82    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
